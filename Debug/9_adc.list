
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000368  00001368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00001368  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000360  08000360  00001368  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000360  08000368  00001368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000364  08000364  00001364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001368  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000047b  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012c  00000000  00000000  00001813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00001940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001024  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004b8  00000000  00000000  00002a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004137  00000000  00000000  00002eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006ff1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000bc  00000000  00000000  00007034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000348 	.word	0x08000348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000348 	.word	0x08000348

080001c8 <main>:
// Main Function
// ==============================

uint32_t adc_value;

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

pa1_adc_init();
 80001ce:	f000 f817 	bl	8000200 <pa1_adc_init>

	while (1) {

start_converstion();
 80001d2:	f000 f847 	bl	8000264 <start_converstion>

adc_value = adc_read();
 80001d6:	f000 f855 	bl	8000284 <adc_read>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <main+0x30>)
 80001de:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 100000; i++){
 80001e0:	2300      	movs	r3, #0
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	e003      	b.n	80001ee <main+0x26>
			__asm__("nop");
 80001e6:	bf00      	nop
		for (int i = 0; i < 100000; i++){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3301      	adds	r3, #1
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a02      	ldr	r2, [pc, #8]	@ (80001fc <main+0x34>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	ddf7      	ble.n	80001e6 <main+0x1e>
start_converstion();
 80001f6:	e7ec      	b.n	80001d2 <main+0xa>
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	0001869f 	.word	0x0001869f

08000200 <pa1_adc_init>:

// ==============================
// ADC Initialization
// ==============================

void pa1_adc_init(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	/* Enable clock access to gpio */
	RCC->AHB1ENR |= GPIOAEN;
 8000204:	4b14      	ldr	r3, [pc, #80]	@ (8000258 <pa1_adc_init+0x58>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a13      	ldr	r2, [pc, #76]	@ (8000258 <pa1_adc_init+0x58>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set PA1 mode to analog mode */
	GPIOA->MODER |= (1U << 2);
 8000210:	4b12      	ldr	r3, [pc, #72]	@ (800025c <pa1_adc_init+0x5c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a11      	ldr	r2, [pc, #68]	@ (800025c <pa1_adc_init+0x5c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 3);
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <pa1_adc_init+0x5c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <pa1_adc_init+0x5c>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6013      	str	r3, [r2, #0]

	/********** Configure adc module **********/
	/* Enable clock access to ADC1 */
	RCC->APB2ENR |= ADC1EN;
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <pa1_adc_init+0x58>)
 800022a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800022c:	4a0a      	ldr	r2, [pc, #40]	@ (8000258 <pa1_adc_init+0x58>)
 800022e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000232:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <pa1_adc_init+0x60>)
 8000236:	2201      	movs	r2, #1
 8000238:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN;
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <pa1_adc_init+0x60>)
 800023c:	2200      	movs	r2, #0
 800023e:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADCON;
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <pa1_adc_init+0x60>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <pa1_adc_init+0x60>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6093      	str	r3, [r2, #8]
	//adc_cr2

}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000
 8000260:	40012000 	.word	0x40012000

08000264 <start_converstion>:

void start_converstion(void){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0


	ADC1->CR2 |= CR2_SWSTART;
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <start_converstion+0x1c>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <start_converstion+0x1c>)
 800026e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000272:	6093      	str	r3, [r2, #8]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40012000 	.word	0x40012000

08000284 <adc_read>:


uint32_t adc_read(void){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

	while (!(ADC1->SR & SR_EOC)){
 8000288:	e000      	b.n	800028c <adc_read+0x8>
		__asm__("nop");
 800028a:	bf00      	nop
	while (!(ADC1->SR & SR_EOC)){
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <adc_read+0x24>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f8      	beq.n	800028a <adc_read+0x6>
	}

	return (ADC1->DR);
 8000298:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <adc_read+0x24>)
 800029a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40012000 	.word	0x40012000

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	@ (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	@ (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff73 	bl	80001c8 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	20000020 	.word	0x20000020

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	@ (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	@ (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	@ (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	@ (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
